// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b7qxVGc4J2aoxUpARxxPVV
// Component: tKVfRngsljsxH
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: P3BswEn_gt1WP/component
import Button from "../../Button"; // plasmic-import: BBnBngbU-SWcU/component
import Section from "../../Section"; // plasmic-import: mkuY5Znd7ymWD/component
import PriceSection from "../../PriceSection"; // plasmic-import: 67Bru7ubRGemv/component
import FooterSection from "../../FooterSection"; // plasmic-import: YLg_xYY5lZJcMe/component

import { useScreenVariants as useScreenVariantsbfAeazZolEhus } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BfAeazZolEHUS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_dark_saa_s_landing_page.module.css"; // plasmic-import: b7qxVGc4J2aoxUpARxxPVV/projectcss
import sty from "./PlasmicLanding.module.css"; // plasmic-import: tKVfRngsljsxH/css

export type PlasmicLanding__VariantMembers = {};

export type PlasmicLanding__VariantsArgs = {};
type VariantPropType = keyof PlasmicLanding__VariantsArgs;
export const PlasmicLanding__VariantProps = new Array<VariantPropType>();

export type PlasmicLanding__ArgsType = {};
type ArgPropType = keyof PlasmicLanding__ArgsType;
export const PlasmicLanding__ArgProps = new Array<ArgPropType>();

export type PlasmicLanding__OverridesType = {
  root?: p.Flex<"div">;
  headerHeroSection?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  h1?: p.Flex<"h1">;
  deviceSection?: p.Flex<typeof Section>;
  productSection?: p.Flex<typeof Section>;
  priceSection?: p.Flex<typeof PriceSection>;
  footerSection?: p.Flex<typeof FooterSection>;
};

export interface DefaultLandingProps {}

function PlasmicLanding__RenderFunc(props: {
  variants: PlasmicLanding__VariantsArgs;
  args: PlasmicLanding__ArgsType;
  overrides: PlasmicLanding__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbfAeazZolEhus()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicLanding.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicLanding.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicLanding.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicLanding.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicLanding.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicLanding.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicLanding.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicLanding.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"headerHeroSection"}
                data-plasmic-override={overrides.headerHeroSection}
                hasGap={true}
                className={classNames(projectcss.all, sty.headerHeroSection)}
              >
                {true ? (
                  <Navbar
                    data-plasmic-name={"navbar"}
                    data-plasmic-override={overrides.navbar}
                    className={classNames("__wab_instance", sty.navbar)}
                  />
                ) : null}

                <div className={classNames(projectcss.all, sty.freeBox__gqb95)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__uueIa)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mbI49)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Все P2P связки для арбитража в одном месте"
                          : "Все P2P связки для арбитража в одном месте"}
                      </h1>

                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__tvDzk
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Все возможные связки на биржах Binance, Huobi, Bybit, OKX, а также Bestchange"
                          : "Все возможные связки на биржах Binance, Huobi, Bybit, OKX, а также Bestchange"}
                      </h2>

                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xHqj
                          )}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__bMstC
                            )}
                            color={"blueBorder" as const}
                            endIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ezyM0
                                )}
                                role={"img"}
                              />
                            }
                            startIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ilGaJ
                                )}
                                role={"img"}
                              />
                            }
                          >
                            {"Learn More"}
                          </Button>

                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__oYu0W
                              )}
                              color={"blueBorder" as const}
                              endIcon={
                                <svg
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__yz7
                                  )}
                                  role={"img"}
                                />
                              }
                              startIcon={
                                <svg
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___4Ripy
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"Learn More"}
                            </Button>
                          ) : null}
                        </div>
                      ) : null}
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__v5FsM)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__v2Hcg)}
                        displayHeight={"464px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("none" as const)
                            : ("814px" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("0px" as const)
                            : ("661px" as const)
                        }
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/dark_saa_s_landing_page/images/arbitrationDemopng2.png",
                          fullWidth: 1831,
                          fullHeight: 947,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </p.Stack>
                </div>
              </p.Stack>
            ) : null}

            <Section
              data-plasmic-name={"deviceSection"}
              data-plasmic-override={overrides.deviceSection}
              background={"office" as const}
              className={classNames("__wab_instance", sty.deviceSection)}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("mobile" as const)
                  : undefined
              }
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__foHmx)}
                id={"about-project" as const}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__wyRAd
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "О проекте"
                    : "О проекте"}
                </h2>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__m6ZNc
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "P2P арбитраж криптовалют очень популярен последнее время, однако львиная доля сложности в данной деятельности падает на поиск актуальных связок и мониторинг. Я и моя команда увидели возможность не только автоматизации данного процесса, но и увеличение производительности и прибыли, за счёт более сложных аналитических алгоритмов и инструментов, позволяющих оказаться в нужном месте, в нужное время. P2PTradeHelper - это проект, направленный на создание продвинутой платформы, для быстрого поиска и совершения выгодных сделок на биржах. Актуальность обусловлена прогнозируемой стабильностью спреда в P2P арбитраже, за счёт человеческого фактора.\nИнструмент отображает ВСЕ возможные прибыльные связки на биржах Binance, Huobi, Bybit, OKX и других, подключенных к платформе. По просьбе желающих могут также подключатся и другие актуальные инструменты по типу Bestchange."
                    : "P2P арбитраж криптовалют очень популярен последнее время, однако львиная доля сложности в данной деятельности падает на поиск актуальных связок и мониторинг. Я и моя команда увидели возможность не только автоматизации данного процесса, но и увеличение производительности и прибыли, за счёт более сложных аналитических алгоритмов и инструментов, позволяющих оказаться в нужном месте, в нужное время. P2PTradeHelper - это проект, направленный на создание продвинутой платформы, для быстрого поиска и совершения выгодных сделок на биржах. Актуальность обусловлена прогнозируемой стабильностью спреда в P2P арбитраже, за счёт человеческого фактора.\nИнструмент отображает ВСЕ возможные прибыльные связки на биржах Binance, Huobi, Bybit, OKX и других, подключенных к платформе. По просьбе желающих могут также подключатся и другие актуальные инструменты по типу Bestchange."}
                </div>
              </div>
            </Section>

            <Section
              data-plasmic-name={"productSection"}
              data-plasmic-override={overrides.productSection}
              background={"shadow" as const}
              className={classNames("__wab_instance", sty.productSection)}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("mobile" as const)
                  : undefined
              }
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__obiO4)}
                id={"benefits" as const}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__kNknI
                  )}
                >
                  {"Наши преимущества"}
                </h2>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__aoCua)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__a2Lue)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__gwLsL)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("50px" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dark_saa_s_landing_page/images/successpng.png",
                        fullWidth: 64,
                        fullHeight: 64,
                        aspectRatio: undefined
                      }}
                    />

                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__oXffX
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Команда"
                        : "Команда"}
                    </h3>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nesdQ
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Развивающийся прозрачный проект, направленный на решение задач своих пользователей в долгосрочной перспективе."
                        : "Развивающийся прозрачный проект, направленный на решение задач своих пользователей в долгосрочной перспективе."}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___4Nybb)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__fbi6D)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("50px" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dark_saa_s_landing_page/images/successpng.png",
                        fullWidth: 64,
                        fullHeight: 64,
                        aspectRatio: undefined
                      }}
                    />

                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__l7RSm
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Лучший интерфейс"
                        : "Лучший интерфейс"}
                    </h3>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gAZH
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Ищите связки без кучи таблиц и значений - выбранные фильтры покажут самую выгодную связку и вы сразу попадёте на биржи к нужным продавцам."
                        : "Ищите связки без кучи таблиц и значений - выбранные фильтры покажут самую выгодную связку и вы сразу попадёте на биржи к нужным продавцам."}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__xd7Ms)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__nkfYd)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("50px" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dark_saa_s_landing_page/images/successpng.png",
                        fullWidth: 64,
                        fullHeight: 64,
                        aspectRatio: undefined
                      }}
                    />

                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__hwzP1
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Лучшая цена"
                        : "Лучшая цена"}
                    </h3>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__grQ5
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Подписываясь на использование нашей платформы вы ничего не теряете, а наоборот - получаете возможность заработать, вложив самую низкую цену на рынке."
                        : "Подписываясь на использование нашей платформы вы ничего не теряете, а наоборот - получаете возможность заработать, вложив самую низкую цену на рынке."}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__pgk4S)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__o7OCe)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("50px" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dark_saa_s_landing_page/images/successpng.png",
                        fullWidth: 64,
                        fullHeight: 64,
                        aspectRatio: undefined
                      }}
                    />

                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3___78Hcx
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Скоростная сортировка и фильтрация"
                        : "Скоростная сортировка и фильтрация"}
                    </h3>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vnIwG
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Удобные фильтры и будущие планируемые инструменты позволят максимально удобно настроить вашу стратегию и отображать связки моментально."
                        : "Удобные фильтры и будущие планируемые инструменты позволят максимально удобно настроить вашу стратегию и отображать связки моментально."}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__s70Nz)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__lAtLy)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("50px" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dark_saa_s_landing_page/images/successpng.png",
                        fullWidth: 64,
                        fullHeight: 64,
                        aspectRatio: undefined
                      }}
                    />

                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__o5V9X
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Прибыльность"
                        : "Прибыльность"}
                    </h3>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vvlUx
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Не нужны большие вложения чтобы прокручивать связки, вы спокойно окупите цену подписки и сможете заработать исходя из ваших возможностей и потребностей."
                        : "Не нужны большие вложения чтобы прокручивать связки, вы спокойно окупите цену подписки и сможете заработать исходя из ваших возможностей и потребностей."}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__jFBxM)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__gAsXm)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("50px" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dark_saa_s_landing_page/images/successpng.png",
                        fullWidth: 64,
                        fullHeight: 64,
                        aspectRatio: undefined
                      }}
                    />

                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__icjC0
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Надёжность и поддержка"
                        : "Надёжность и поддержка"}
                    </h3>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aNvmE
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Мы развиваем нашу платформу и активно помогаем как начинающим, так и опытным пользователям. Достаточно написать нам или спросить в группе Telegram."
                        : "Мы развиваем нашу платформу и активно помогаем как начинающим, так и опытным пользователям. Достаточно написать нам или спросить в группе Telegram."}
                    </div>
                  </div>
                </p.Stack>
              </div>
            </Section>

            {true ? (
              <PriceSection
                data-plasmic-name={"priceSection"}
                data-plasmic-override={overrides.priceSection}
                className={classNames("__wab_instance", sty.priceSection)}
              />
            ) : null}
            {true ? (
              <FooterSection
                data-plasmic-name={"footerSection"}
                data-plasmic-override={overrides.footerSection}
                className={classNames("__wab_instance", sty.footerSection)}
              />
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerHeroSection",
    "navbar",
    "h1",
    "deviceSection",
    "productSection",
    "priceSection",
    "footerSection"
  ],
  headerHeroSection: ["headerHeroSection", "navbar", "h1"],
  navbar: ["navbar"],
  h1: ["h1"],
  deviceSection: ["deviceSection"],
  productSection: ["productSection"],
  priceSection: ["priceSection"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerHeroSection: "div";
  navbar: typeof Navbar;
  h1: "h1";
  deviceSection: typeof Section;
  productSection: typeof Section;
  priceSection: typeof PriceSection;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLanding__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLanding__VariantsArgs;
    args?: PlasmicLanding__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLanding__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLanding__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLanding__ArgProps,
          internalVariantPropNames: PlasmicLanding__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLanding__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLanding";
  } else {
    func.displayName = `PlasmicLanding.${nodeName}`;
  }
  return func;
}

export const PlasmicLanding = Object.assign(
  // Top-level PlasmicLanding renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerHeroSection: makeNodeComponent("headerHeroSection"),
    navbar: makeNodeComponent("navbar"),
    h1: makeNodeComponent("h1"),
    deviceSection: makeNodeComponent("deviceSection"),
    productSection: makeNodeComponent("productSection"),
    priceSection: makeNodeComponent("priceSection"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicLanding
    internalVariantProps: PlasmicLanding__VariantProps,
    internalArgProps: PlasmicLanding__ArgProps,

    // Page metadata
    pageMetadata: {
      title:
        "P2P Trade Helper | Ссылки на P2P связки для арбитража и торговли криптовалютами",
      description:
        "Инструмент для P2P арбитража - все возможные связки на биржах Binance, Huobi, Bybit, OKX, а также Bestchange",
      ogImageSrc:
        "https://site-assets.plasmic.app/cd73497135dbc6b1fe12a861716c6902.jpg",
      canonical: ""
    }
  }
);

export default PlasmicLanding;
/* prettier-ignore-end */
